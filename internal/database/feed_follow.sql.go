// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follow.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
with inserted_feed_follow as (
    INSERT INTO feed_follows (id, created_at, updated_at, feed_id, user_id)
    VALUES (
        gen_random_uuid(),
        NOW(),
        NOW(),
        $1,
        $2
    )
    RETURNING id, created_at, updated_at, feed_id, user_id
)
SELECT 
    iff.id, 
    iff.created_at, 
    iff.updated_at, 
    iff.feed_id, 
    iff.user_id, 
    f.name AS feed_name, 
    u.name AS user_name
FROM inserted_feed_follow AS iff
LEFT JOIN feeds AS f ON iff.feed_id = f.id
LEFT JOIN users AS u ON iff.user_id = u.id
`

type CreateFeedFollowParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    uuid.UUID
	UserID    uuid.UUID
	FeedName  sql.NullString
	UserName  sql.NullString
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.FeedID, arg.UserID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedID,
		&i.UserID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
Delete from feed_follows
`

func (q *Queries) DeleteFeedFollow(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
Select
    f.name as feed_name
from feed_follows as ff
left join feeds as f on ff.feed_id = f.id
where ff.user_id = $1
`

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var feed_name sql.NullString
		if err := rows.Scan(&feed_name); err != nil {
			return nil, err
		}
		items = append(items, feed_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
